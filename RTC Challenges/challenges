########################
STAND_UP CHALLENGES
########################
1) ------------------------------------------------------

  int count = 0;
  for (int i = 0; i < N; i++) 
      for (int j = 0; j < i; j++) 
          count++;

  ########################
  ANSWER: O(N^2)
  JUSTIFICATION:
    The outer-loop has a RTC of O(n) as it will iterate for i < N times
    The inner-loop has a RTC that increases on each iteration:
      iteration 1: 
        i = 0           i = 1           i = 2
        j = 0, j < 0    j = 0, j < 1    j = 0, j < 2
        # iterations 0  # iterations 1  # iterations 2

    ATTEMPT at computing RTC algebraically:    
    --------------------------------------------------------
    O(N * ((N - N) + (N - (N-1) + (N - (N-2)... (N - (N-N)))
    --------------------------------------------------------
    O(N * ((  0  ) + (    1   ) + (    2   )... (    N   )))
    --------------------------------------------------------
    O(N * N)
    --------------------------------------------------------
    O(N^2)
    ########################

2) ------------------------------------------------------

  int count = 0;
  for (int i = N; i > 0; i /= 2) 
      for (int j = 0; j < i; j++) 
          count++;

  ########################
  ANSWER:
3) ------------------------------------------------------

  for (int i = 1; i < n; i = i * 2){
      console.log("Hey - I'm busy looking at: " + i);
  }

  ########################
  ANSWER:
4) ------------------------------------------------------

  for (int i = 1; i <= n; i++){
      for(int j = 1; j < 8; j = j * 2) {
          console.log("Hey - I'm busy looking at: " + i + " and " + j);
      }
  }

  ########################
  ANSWER:
5) ------------------------------------------------------

  for (int i = 1; i <= Math.pow(2, n); i++){
    console.log("Hey - I'm busy looking at: " + i);
  }

  ########################
  ANSWER:


